#==============================================================================
#   Copyright (c) 2001-2011 Joel de Guzman
#   Copyright (c) 2001-2012 Hartmut Kaiser
#   Copyright (c)      2011 Bryce Lelbach
#
#   Use, modification and distribution is subject to the Boost Software
#   License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
#   http://www.boost.org/LICENSE_1_0.txt)
#==============================================================================

import modules ;
import path ;
import testing ; # bring in rules for testing

project spirit-lex
    : requirements
        <include>.
        <c++-template-depth>512
    ;

rule location ( name )
{
    local this = [ modules.binding $(__name__) ] ;
    local here = [ path.parent [ path.make $(this) ] ] ;
    return [ path.join $(here) $(name) ] ;
}

###############################################################################
alias spirit-lex
    :

    [ run auto_switch_lexerstate.cpp    : : : : lex_auto_switch_lexerstate ]
    [ run dedent_handling_phoenix.cpp   : : : : lex_dedent_handling_phoenix ]
    [ run id_type_enum.cpp              : : : : lex_id_type_enum ]
    [ run lexertl1.cpp                  : : : : lex_lexertl1 ]
    [ run lexertl2.cpp                  : : : : lex_lexertl2 ]
    [ run lexertl3.cpp                  : : : : lex_lexertl3 ]
    [ run lexertl4.cpp                  : : : : lex_lexertl4 ]
    [ run lexertl5.cpp                  : : : : lex_lexertl5 ]
    [ run lexer_state_switcher.cpp      : : : : lex_lexer_state_switcher ]
    [ run semantic_actions.cpp          : : : : lex_semantic_actions ]
    [ run set_token_value.cpp           : : : : lex_set_token_value ]
    [ run set_token_value_phoenix.cpp   : : : : lex_set_token_value_phoenix ]
    [ run state_switcher.cpp            : : : : lex_state_switcher ]
    [ run string_token_id.cpp           : : : : lex_string_token_id ]
    [ run token_iterpair.cpp            : : : : lex_token_iterpair ]
    [ run token_moretypes.cpp           : : : : lex_token_moretypes ]
    [ run token_omit.cpp                : : : : lex_token_omit ]
    [ run token_onetype.cpp             : : : : lex_token_onetype ]
    [ run plain_token.cpp               : : : : lex_plain_token ]

    [ run regression_basic_lexer.cpp            : : : : lex_regression_basic_lexer ]
    [ run regression_matlib_dynamic.cpp         : : : : lex_regression_matlib_dynamic ]
    [ run regression_matlib_generate.cpp
        : [ location matlib_static.h ]
        : : : lex_regression_matlib_generate ]
    [ run regression_matlib_static.cpp          : :
        : <dependency>lex_regression_matlib_generate
        : lex_regression_matlib_static ]
    [ run regression_matlib_generate_switch.cpp
        : [ location matlib_static_switch.h ]
        : : : lex_regression_matlib_generate_switch ]
    [ run regression_matlib_switch.cpp          : :
        : <dependency>lex_regression_matlib_generate_switch
        : lex_regression_matlib_switch ]
    [ run regression_word_count.cpp             : : : : lex_regression_word_count ]
    [ run regression_syntax_error.cpp           : : : : lex_regression_syntax_error ]
    [ run regression_wide.cpp                   : : : : lex_regression_wide ]
    [ run regression_file_iterator1.cpp         : : : : lex_regression_file_iterator1 ]
    [ run regression_file_iterator2.cpp         : : : : lex_regression_file_iterator2 ]
    [ run regression_file_iterator3.cpp         : : : : lex_regression_file_iterator3 ]
    [ run regression_file_iterator4.cpp         : : : : lex_regression_file_iterator4 ]
    [ run regression_static_wide_6253.cpp       : : : : lex_regression_static_wide_6253 ]
    [ run regression_less_8563.cpp              : : : : lex_regression_less_8563 ]

    ;
